// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: queries.sql

package escwebapp

import (
	"context"
)

const createUsers = `-- name: CreateUsers :one
INSERT INTO escwebapp.users (User_Name, Pass_Word_Hash, name,E_Mail_Address)
VALUES ($1,
        $2,
        $3,
        $4) RETURNING user_id, user_name, pass_word_hash, name, created_at, e_mail_address
`

type CreateUsersParams struct {
	UserName     string
	PassWordHash string
	Name         string
	EMailAddress string
}

// insert new user
func (q *Queries) CreateUsers(ctx context.Context, arg CreateUsersParams) (EscwebappUser, error) {
	row := q.db.QueryRowContext(ctx, createUsers,
		arg.UserName,
		arg.PassWordHash,
		arg.Name,
		arg.EMailAddress,
	)
	var i EscwebappUser
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.PassWordHash,
		&i.Name,
		&i.CreatedAt,
		&i.EMailAddress,
	)
	return i, err
}

const deleteUsers = `-- name: DeleteUsers :exec
DELETE
FROM escwebapp.users
WHERE user_id = $1
`

// delete a particular user
func (q *Queries) DeleteUsers(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUsers, userID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT user_id, user_name, pass_word_hash, name, created_at, e_mail_address
FROM escwebapp.users
WHERE user_id = $1
`

// get users of a particular user_id
func (q *Queries) GetUser(ctx context.Context, userID int64) (EscwebappUser, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var i EscwebappUser
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.PassWordHash,
		&i.Name,
		&i.CreatedAt,
		&i.EMailAddress,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT user_id, user_name, pass_word_hash, name, created_at, e_mail_address
FROM escwebapp.users
ORDER BY user_name
`

// get all users ordered by the username
func (q *Queries) ListUsers(ctx context.Context) ([]EscwebappUser, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EscwebappUser
	for rows.Next() {
		var i EscwebappUser
		if err := rows.Scan(
			&i.UserID,
			&i.UserName,
			&i.PassWordHash,
			&i.Name,
			&i.CreatedAt,
			&i.EMailAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
